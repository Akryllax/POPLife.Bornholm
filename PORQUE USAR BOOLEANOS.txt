Representación gráfica de un booleano vs una string de dos caracteres (asumiendo ASCII):

true:	1
"si\0":	01110011 01101001 01101110

false:	0
"no\0":	01101110 01101111 01101110

Evaluacion booleanos.
-----------------------------------------------

if(_var) {		
		<=>	_var == 1
};			


CALCULOS: 1
-----------------------------------------------

Comparación de Strings.
-----------------------------------------------
if(_var isEqualTo "si") {

}

if(_var == "si") {

}

## Es equivalente a: ##

//Antes de esto se hace typecheck para comprobar que ambos son string.

int len1 = _var.length;
int len2 = "si".length;

if(len1 != len2) {
	return false;
}


bool equal = false;

for(int i = 0; i < len1; i++) {
	if(_var.charAt[i] != "si".charAt[i]) {
		return false;
	} else {
		equal = true;
	}
}

return equal;


CALCULOS: 1 + a.lenght + b.lenght + a.lenght * i + b.lenght * i
(Para comparacion "si" == "si" son 13 calculos).
-----------------------------------------------
Otros motivos:

"Si" != "si"

"sI" != "si"

"sí" != "si"

"SI" != "si"

Incluso a veces:
"si" != "si" (por fallos en la codificación, p.e., ASCII vs UNICODE).


En cambio:

true == true
TrUe == true
tRuE == true
TRUE == true

No hay codificación por medio, el compilador lo pasa a binario al compilar.